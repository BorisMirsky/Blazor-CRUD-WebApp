@page "/allemployees"

@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject BlazorCRUDWebApp.Services.IEmployeeService EmployeeService
@inject IJSRuntime JSRuntime
@using BlazorCRUDWebApp.Models
@using BlazorCRUDWebApp.Services
@inject IJSRuntime JSRuntime


<br />
<br />
<h3>Все сотрудники</h3>
<br />
<br />
<br />


<div style="width: 800px;">
<PaginationComponent TItem="Employee" Items="employees" DefaultPageSize="10">
    <ChildContentHeader>
        <thead>
            <tr>
                <th>Имя</th>
                <th>Год рождения</th>
                <th>Пол</th>
                <th>Должность</th>
                <th>Зарплата</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
    </ChildContentHeader>
    <ChildContentRow Context="Employee">
        <tbody>
                <tr>
                    <td>@Employee.Name</td>
                    <td>@Employee.Gender</td>
                    <td>@Employee.Birthdate</td>
                    <td>@Employee.Position</td>
                    <td>@Employee.Salary</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => NavigateToUpdate(Employee.Id)">
                            Изменить
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteEmployee(Employee.Id)">
                            Удалить
                        </button>
                    </td>
                </tr>
        </tbody>
    </ChildContentRow>
</PaginationComponent>
</div>



<br />
<br />
<br />
<button class="btn btn-primary" @onclick="OpenAddEmployee">Add New Employee</button>
<br />
<br />
<br />
<br />
<br />


@code {
    private List<Models.Employee>? employees;

    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetEmployees();

    }

    private void OpenAddEmployee()
    {
        Navigation.NavigateTo("/add-employee");
    }

    private void NavigateToUpdate(Guid id)
    {
        Navigation.NavigateTo($"/update/{id}");
    }

    private async Task DeleteEmployee(Guid id)
    {
        Employee employee = await EmployeeService.GetEmployee(id);
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Вы уверены, что хотите удалить пользователя '{employee.Name}' ?"))
            return;
        await EmployeeService.DeleteEmployee(id);
        employees = await EmployeeService.GetEmployees();
    }

}

