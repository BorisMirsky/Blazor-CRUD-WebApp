@page "/allemployees"

@* @typeparam TItem       *@
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject BlazorCRUDWebApp.Services.IEmployeeService EmployeeService
@inject IJSRuntime JSRuntime


<br />
<br />
<h3>Все сотрудники</h3>


<br />
<br />
<br />



@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Имя</th>
                <th>Год рождения</th>
                <th>Пол</th>
                <th>Должность</th>
                <th>Зарплата</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    <td>@employee.Name</td>
                    <td>@employee.Gender</td>
                    <td>@employee.Birthdate</td>
                    <td>
                        @employee.Position
                    </td>
                    <td>@employee.Salary</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => NavigateToUpdate(employee.Id)">
                            Изменить
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteEmployee(employee.Id)">
                            Удалить 
                         </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

<br />
<br />

<button class="btn btn-primary" @onclick="OpenAddEmployee">Add New Employee</button>
<br />
<br />
<br />
<br />



@code {
    private List<Models.Employee>? employees;

    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetEmployees();

    }

    private void OpenAddEmployee()
    {
        Navigation.NavigateTo("/add-employee");
    }

    private void NavigateToUpdate(Guid id)
    {
        Navigation.NavigateTo($"/update/{id}");
    }

    private async Task DeleteEmployee(Guid id)
    {
        
        await EmployeeService.DeleteEmployee(id);
        employees = await EmployeeService.GetEmployees();
        //}
    }
}

